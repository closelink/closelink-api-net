/* 
 * Closelink API
 *
 * This is the documentation of the public Closelink API. For now it contains all routes to manage Stocks and Schedules for specific vessels.
 *
 * OpenAPI spec version: v1
 * Contact: service@closelink.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CloselinkAPI.Client;
using CloselinkAPI.Model;

namespace CloselinkAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScheduleApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates new Schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;Schedule&gt;</returns>
        List<Schedule> Create (List<Schedule> body = null);

        /// <summary>
        /// Creates new Schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Schedule&gt;</returns>
        ApiResponse<List<Schedule>> CreateWithHttpInfo (List<Schedule> body = null);
        /// <summary>
        /// Finds a Schedule by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId"></param>
        /// <returns>Schedule</returns>
        Schedule Get (string scheduleId);

        /// <summary>
        /// Finds a Schedule by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId"></param>
        /// <returns>ApiResponse of Schedule</returns>
        ApiResponse<Schedule> GetWithHttpInfo (string scheduleId);
        /// <summary>
        /// Finds a List of Schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>List&lt;Schedule&gt;</returns>
        List<Schedule> GetList (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null);

        /// <summary>
        /// Finds a List of Schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Schedule&gt;</returns>
        ApiResponse<List<Schedule>> GetListWithHttpInfo (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null);
        /// <summary>
        /// Finds a Page of Schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>Page</returns>
        Page GetPage (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null);

        /// <summary>
        /// Finds a Page of Schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>ApiResponse of Page</returns>
        ApiResponse<Page> GetPageWithHttpInfo (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null);
        /// <summary>
        /// Updates future Schedules (Overrides all future Schedules)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;Schedule&gt;</returns>
        List<Schedule> Update (List<Schedule> body = null);

        /// <summary>
        /// Updates future Schedules (Overrides all future Schedules)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Schedule&gt;</returns>
        ApiResponse<List<Schedule>> UpdateWithHttpInfo (List<Schedule> body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates new Schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;Schedule&gt;</returns>
        System.Threading.Tasks.Task<List<Schedule>> CreateAsync (List<Schedule> body = null);

        /// <summary>
        /// Creates new Schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Schedule&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Schedule>>> CreateAsyncWithHttpInfo (List<Schedule> body = null);
        /// <summary>
        /// Finds a Schedule by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId"></param>
        /// <returns>Task of Schedule</returns>
        System.Threading.Tasks.Task<Schedule> GetAsync (string scheduleId);

        /// <summary>
        /// Finds a Schedule by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId"></param>
        /// <returns>Task of ApiResponse (Schedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<Schedule>> GetAsyncWithHttpInfo (string scheduleId);
        /// <summary>
        /// Finds a List of Schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>Task of List&lt;Schedule&gt;</returns>
        System.Threading.Tasks.Task<List<Schedule>> GetListAsync (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null);

        /// <summary>
        /// Finds a List of Schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Schedule&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Schedule>>> GetListAsyncWithHttpInfo (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null);
        /// <summary>
        /// Finds a Page of Schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>Task of Page</returns>
        System.Threading.Tasks.Task<Page> GetPageAsync (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null);

        /// <summary>
        /// Finds a Page of Schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>Task of ApiResponse (Page)</returns>
        System.Threading.Tasks.Task<ApiResponse<Page>> GetPageAsyncWithHttpInfo (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null);
        /// <summary>
        /// Updates future Schedules (Overrides all future Schedules)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;Schedule&gt;</returns>
        System.Threading.Tasks.Task<List<Schedule>> UpdateAsync (List<Schedule> body = null);

        /// <summary>
        /// Updates future Schedules (Overrides all future Schedules)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Schedule&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Schedule>>> UpdateAsyncWithHttpInfo (List<Schedule> body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScheduleApi : IScheduleApi
    {
        private CloselinkAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScheduleApi(String basePath)
        {
            this.Configuration = new CloselinkAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CloselinkAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScheduleApi(CloselinkAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CloselinkAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CloselinkAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CloselinkAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CloselinkAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates new Schedules 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;Schedule&gt;</returns>
        public List<Schedule> Create (List<Schedule> body = null)
        {
             ApiResponse<List<Schedule>> localVarResponse = CreateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new Schedules 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Schedule&gt;</returns>
        public ApiResponse< List<Schedule> > CreateWithHttpInfo (List<Schedule> body = null)
        {

            var localVarPath = "/v1/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Schedule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Schedule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Schedule>)));
        }

        /// <summary>
        /// Creates new Schedules 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;Schedule&gt;</returns>
        public async System.Threading.Tasks.Task<List<Schedule>> CreateAsync (List<Schedule> body = null)
        {
             ApiResponse<List<Schedule>> localVarResponse = await CreateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates new Schedules 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Schedule&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Schedule>>> CreateAsyncWithHttpInfo (List<Schedule> body = null)
        {

            var localVarPath = "/v1/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Schedule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Schedule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Schedule>)));
        }

        /// <summary>
        /// Finds a Schedule by id 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId"></param>
        /// <returns>Schedule</returns>
        public Schedule Get (string scheduleId)
        {
             ApiResponse<Schedule> localVarResponse = GetWithHttpInfo(scheduleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds a Schedule by id 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId"></param>
        /// <returns>ApiResponse of Schedule</returns>
        public ApiResponse< Schedule > GetWithHttpInfo (string scheduleId)
        {
            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
                throw new ApiException(400, "Missing required parameter 'scheduleId' when calling ScheduleApi->Get");

            var localVarPath = "/v1/schedule/{scheduleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scheduleId != null) localVarPathParams.Add("scheduleId", this.Configuration.ApiClient.ParameterToString(scheduleId)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Schedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Schedule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Schedule)));
        }

        /// <summary>
        /// Finds a Schedule by id 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId"></param>
        /// <returns>Task of Schedule</returns>
        public async System.Threading.Tasks.Task<Schedule> GetAsync (string scheduleId)
        {
             ApiResponse<Schedule> localVarResponse = await GetAsyncWithHttpInfo(scheduleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds a Schedule by id 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId"></param>
        /// <returns>Task of ApiResponse (Schedule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Schedule>> GetAsyncWithHttpInfo (string scheduleId)
        {
            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
                throw new ApiException(400, "Missing required parameter 'scheduleId' when calling ScheduleApi->Get");

            var localVarPath = "/v1/schedule/{scheduleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scheduleId != null) localVarPathParams.Add("scheduleId", this.Configuration.ApiClient.ParameterToString(scheduleId)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Schedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Schedule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Schedule)));
        }

        /// <summary>
        /// Finds a List of Schedules 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>List&lt;Schedule&gt;</returns>
        public List<Schedule> GetList (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null)
        {
             ApiResponse<List<Schedule>> localVarResponse = GetListWithHttpInfo(page, imo, etaFrom, etaTo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds a List of Schedules 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Schedule&gt;</returns>
        public ApiResponse< List<Schedule> > GetListWithHttpInfo (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null)
        {

            var localVarPath = "/v1/schedule/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (imo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imo", imo)); // query parameter
            if (etaFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "etaFrom", etaFrom)); // query parameter
            if (etaTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "etaTo", etaTo)); // query parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Schedule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Schedule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Schedule>)));
        }

        /// <summary>
        /// Finds a List of Schedules 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>Task of List&lt;Schedule&gt;</returns>
        public async System.Threading.Tasks.Task<List<Schedule>> GetListAsync (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null)
        {
             ApiResponse<List<Schedule>> localVarResponse = await GetListAsyncWithHttpInfo(page, imo, etaFrom, etaTo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds a List of Schedules 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Schedule&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Schedule>>> GetListAsyncWithHttpInfo (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null)
        {

            var localVarPath = "/v1/schedule/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (imo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imo", imo)); // query parameter
            if (etaFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "etaFrom", etaFrom)); // query parameter
            if (etaTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "etaTo", etaTo)); // query parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Schedule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Schedule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Schedule>)));
        }

        /// <summary>
        /// Finds a Page of Schedules 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>Page</returns>
        public Page GetPage (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null)
        {
             ApiResponse<Page> localVarResponse = GetPageWithHttpInfo(page, imo, etaFrom, etaTo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds a Page of Schedules 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>ApiResponse of Page</returns>
        public ApiResponse< Page > GetPageWithHttpInfo (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null)
        {

            var localVarPath = "/v1/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (imo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imo", imo)); // query parameter
            if (etaFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "etaFrom", etaFrom)); // query parameter
            if (etaTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "etaTo", etaTo)); // query parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Page) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Page)));
        }

        /// <summary>
        /// Finds a Page of Schedules 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>Task of Page</returns>
        public async System.Threading.Tasks.Task<Page> GetPageAsync (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null)
        {
             ApiResponse<Page> localVarResponse = await GetPageAsyncWithHttpInfo(page, imo, etaFrom, etaTo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds a Page of Schedules 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Requested Page number (optional)</param>
        /// <param name="imo">Optional imo filter (optional)</param>
        /// <param name="etaFrom">Optional eta from date filter (optional)</param>
        /// <param name="etaTo">Optional eta to date filter (optional)</param>
        /// <returns>Task of ApiResponse (Page)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Page>> GetPageAsyncWithHttpInfo (int? page = null, string imo = null, DateTime? etaFrom = null, DateTime? etaTo = null)
        {

            var localVarPath = "/v1/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (imo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imo", imo)); // query parameter
            if (etaFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "etaFrom", etaFrom)); // query parameter
            if (etaTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "etaTo", etaTo)); // query parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Page) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Page)));
        }

        /// <summary>
        /// Updates future Schedules (Overrides all future Schedules) 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;Schedule&gt;</returns>
        public List<Schedule> Update (List<Schedule> body = null)
        {
             ApiResponse<List<Schedule>> localVarResponse = UpdateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates future Schedules (Overrides all future Schedules) 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Schedule&gt;</returns>
        public ApiResponse< List<Schedule> > UpdateWithHttpInfo (List<Schedule> body = null)
        {

            var localVarPath = "/v1/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Schedule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Schedule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Schedule>)));
        }

        /// <summary>
        /// Updates future Schedules (Overrides all future Schedules) 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;Schedule&gt;</returns>
        public async System.Threading.Tasks.Task<List<Schedule>> UpdateAsync (List<Schedule> body = null)
        {
             ApiResponse<List<Schedule>> localVarResponse = await UpdateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates future Schedules (Overrides all future Schedules) 
        /// </summary>
        /// <exception cref="CloselinkAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Schedule&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Schedule>>> UpdateAsyncWithHttpInfo (List<Schedule> body = null)
        {

            var localVarPath = "/v1/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Schedule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Schedule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Schedule>)));
        }

    }
}
